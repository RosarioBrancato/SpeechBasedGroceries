// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SpeechBasedGroceries.Parties.Fridgy.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Update.
    /// </summary>
    public static partial class UpdateExtensions
    {
            /// <summary>
            /// Update an existing product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Product object that needs to be updated
            /// </param>
            /// <param name='barcode'>
            /// Barcode used as unique identifier to find product
            /// </param>
            public static Product Products(this IUpdate operations, CreateProduct body, string barcode)
            {
                return operations.ProductsAsync(body, barcode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Product object that needs to be updated
            /// </param>
            /// <param name='barcode'>
            /// Barcode used as unique identifier to find product
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Product> ProductsAsync(this IUpdate operations, CreateProduct body, string barcode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProductsWithHttpMessagesAsync(body, barcode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing item in a fridge identified by UUID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            /// <param name='itemUuid'>
            /// UUID of item
            /// </param>
            /// <param name='body'>
            /// Updated item.
            /// </param>
            public static Item ItemMethod(this IUpdate operations, string uuid, string itemUuid, Paths1qz8pmtfridgesUuidItemsItemUuidputrequestbodycontentapplicationJsonschema body = default(Paths1qz8pmtfridgesUuidItemsItemUuidputrequestbodycontentapplicationJsonschema))
            {
                return operations.ItemMethodAsync(uuid, itemUuid, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing item in a fridge identified by UUID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            /// <param name='itemUuid'>
            /// UUID of item
            /// </param>
            /// <param name='body'>
            /// Updated item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> ItemMethodAsync(this IUpdate operations, string uuid, string itemUuid, Paths1qz8pmtfridgesUuidItemsItemUuidputrequestbodycontentapplicationJsonschema body = default(Paths1qz8pmtfridgesUuidItemsItemUuidputrequestbodycontentapplicationJsonschema), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ItemMethodWithHttpMessagesAsync(uuid, itemUuid, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
