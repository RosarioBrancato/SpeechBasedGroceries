// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SpeechBasedGroceries.Parties.Fridgy.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Create.
    /// </summary>
    public static partial class CreateExtensions
    {
            /// <summary>
            /// Add a new product to the repository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Product object that needs to be added to the repository
            /// </param>
            public static Product Products(this ICreate operations, CreateProduct body)
            {
                return operations.ProductsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new product to the repository
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Product object that needs to be added to the repository
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Product> ProductsAsync(this ICreate operations, CreateProduct body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProductsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a new fridge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Fridge that needs to be created
            /// </param>
            public static Fridge Fridges(this ICreate operations, BaseFridge body)
            {
                return operations.FridgesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new fridge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Fridge that needs to be created
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fridge> FridgesAsync(this ICreate operations, BaseFridge body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FridgesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register a new user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UUID of user that should be added as owner
            /// </param>
            public static User UserMethod(this ICreate operations, PostUser body)
            {
                return operations.UserMethodAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register a new user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// UUID of user that should be added as owner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> UserMethodAsync(this ICreate operations, PostUser body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserMethodWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
