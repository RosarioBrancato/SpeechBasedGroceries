// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SpeechBasedGroceries.Parties.Fridgy.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Get.
    /// </summary>
    public static partial class GetExtensions
    {
            /// <summary>
            /// Find product by barcode
            /// </summary>
            /// <remarks>
            /// Searches the produts by the unique identifier of barcode.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='barcode'>
            /// Barcode used as unique identifier to find product
            /// </param>
            public static Product Barcode(this IGet operations, string barcode)
            {
                return operations.BarcodeAsync(barcode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Find product by barcode
            /// </summary>
            /// <remarks>
            /// Searches the produts by the unique identifier of barcode.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='barcode'>
            /// Barcode used as unique identifier to find product
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Product> BarcodeAsync(this IGet operations, string barcode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BarcodeWithHttpMessagesAsync(barcode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all products
            /// </summary>
            /// <remarks>
            /// Returns an array of all products in the repository
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// The sorting of the result. e.g. name.asc, id.desc
            /// </param>
            /// <param name='query'>
            /// Filter applied to the name and description of the products.
            /// </param>
            public static IList<Product> Products(this IGet operations, string sortBy = default(string), string query = default(string))
            {
                return operations.ProductsAsync(sortBy, query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all products
            /// </summary>
            /// <remarks>
            /// Returns an array of all products in the repository
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// The sorting of the result. e.g. name.asc, id.desc
            /// </param>
            /// <param name='query'>
            /// Filter applied to the name and description of the products.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Product>> ProductsAsync(this IGet operations, string sortBy = default(string), string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProductsWithHttpMessagesAsync(sortBy, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Fridge> Fridges(this IGet operations)
            {
                return operations.FridgesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Fridge>> FridgesAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FridgesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get fridge by UUID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            public static Fridge Uuid(this IGet operations, string uuid)
            {
                return operations.UuidAsync(uuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get fridge by UUID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fridge> UuidAsync(this IGet operations, string uuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UuidWithHttpMessagesAsync(uuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all items in a specified fridge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            public static IList<Item> Items(this IGet operations, string uuid)
            {
                return operations.ItemsAsync(uuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all items in a specified fridge.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Item>> ItemsAsync(this IGet operations, string uuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ItemsWithHttpMessagesAsync(uuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific item by it's UUID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            /// <param name='itemUuid'>
            /// UUID of item
            /// </param>
            public static Item ItemMethod(this IGet operations, string uuid, string itemUuid)
            {
                return operations.ItemMethodAsync(uuid, itemUuid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific item by it's UUID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uuid'>
            /// UUID to identify a fridge
            /// </param>
            /// <param name='itemUuid'>
            /// UUID of item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Item> ItemMethodAsync(this IGet operations, string uuid, string itemUuid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ItemMethodWithHttpMessagesAsync(uuid, itemUuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Filters a for a username
            /// </param>
            /// <param name='email'>
            /// Filters a for an email
            /// </param>
            public static IList<User> UserMethod(this IGet operations, string username = default(string), string email = default(string))
            {
                return operations.UserMethodAsync(username, email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// Filters a for a username
            /// </param>
            /// <param name='email'>
            /// Filters a for an email
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<User>> UserMethodAsync(this IGet operations, string username = default(string), string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UserMethodWithHttpMessagesAsync(username, email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user with this email address..
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// E-Mail address identifying the user
            /// </param>
            public static PublicUser Email(this IGet operations, string email)
            {
                return operations.EmailAsync(email).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user with this email address..
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// E-Mail address identifying the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublicUser> EmailAsync(this IGet operations, string email, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EmailWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TokensResponse Jwttoken(this IGet operations)
            {
                return operations.JwttokenAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TokensResponse> JwttokenAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.JwttokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TokenResponse Refreshtoken(this IGet operations)
            {
                return operations.RefreshtokenAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TokenResponse> RefreshtokenAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RefreshtokenWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
